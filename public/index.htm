<!DOCTYPE html>
<html>
<head>
  <style type="text/css">
    body {
      background-color: #EEE;
    }

    canvas {
      position: absolute;
      width: 720px;
      height: 624px;
      left: 50%;
      top: 50%;
      margin-left: -360px;
      margin-top: -312px;
      background-color: #666;

      /* Retro-ified */
      image-rendering: optimizeSpeed;
      image-rendering:-o-crisp-edges;
      image-rendering:-webkit-optimize-contrast;
      -ms-interpolation-mode: nearest-neighbor;
    }
  </style>

  <script src="http://code.jquery.com/jquery-1.9.1.min.js" type="text/javascript"></script>
  <script type="text/javascript">
      var player = {
        id: 0,
        x: 24,
        y: 24,
        direction: 0,
        directions: { left: 0, right: 1, up: 2, down: 3},
        moving: false,
        collision: { x: -8, y: -8, w: 16, h: 16},
        graphics: {x:-8,y:-16,w:16,h:24},
        
        render: function(ctx){
            ctx.fillRect( this.x+this.graphics.x,this.y+this.graphics.y,this.graphics.w,this.graphics.h);
        },

        bindToKeyboard: function(){
            var p=this; //scope into the jquery callbacks
            $(document).keydown(function(e){
                switch(e.keyCode){
                    case 37: 
                        p.move(player.directions.left);
                        break;
                    case 39: 
                        p.move(player.directions.right);
                        break;
                    case 38:
                        p.move(player.directions.up);
                        break;
                    case 40:
                        p.move(player.directions.down);
                        break;
                }
                console.log(e.keyCode);
            });
            $(document).keyup(function(e){
                switch(e.keyCode){
                    case 37: 
                        p.stop(player.directions.left);
                        break;
                    case 39: 
                        p.stop(player.directions.right);
                        break;
                    case 38:
                        p.stop(player.directions.up);
                        break;
                    case 40:
                        p.stop(player.directions.down);
                        break;
                }
                console.log(e.keyCode);
            });
        },

        bindToServer: function(){
            
        },
        move: function(direction){
            console.log(direction);
        },
        stop: function(direction){
            console.log("stop",direction);
        },

        update: function(){
            
        }
 
      }  
    
      var ctx = null;

    $(function() {
      var FPS = 30;
      var TILE_WIDTH = 16;
      var TILE_HEIGHT = 16;
      var CANVAS_WIDTH = 240;
      var CANVAS_HEIGHT = 208;

      var interval = null;
      var ctx = null;
      var background = null;
      var bombs = [];

      // From: http://www.htmlgoodies.com/html5/tutorials/create-an-object-oriented-javascript-class-constructor.html#fbid=EYauP6cfQH6
      var Class = function(methods) {   
        var klass = function() {    
          this.initialize.apply(this, arguments);          
        };  

        for (var property in methods) { 
          klass.prototype[property] = methods[property];
        }
              
        if (!klass.prototype.initialize) klass.prototype.initialize = function(){};      

        return klass;    
      };

      var Bomb = Class({
        x: 0,
        y: 0,

        initialize: function() {
          bombs.push(this);
        },

        update: function() {
          console.log('update');
        },

        draw: function() {

        }
      });

      function drawBackground() {
        // Draw top border
        for (var x = 0; x < CANVAS_WIDTH; x += TILE_WIDTH) {
          ctx.drawImage(background, 0, 0, TILE_WIDTH, TILE_HEIGHT, x, 0, TILE_WIDTH, TILE_HEIGHT);
        }

        // Draw bottom border
        var y = CANVAS_HEIGHT - TILE_HEIGHT;
        for (var x = 0; x < CANVAS_WIDTH; x += TILE_WIDTH) {
          ctx.drawImage(background, 0, 0, TILE_WIDTH, TILE_HEIGHT, x, y, TILE_WIDTH, TILE_HEIGHT);
        }

        // Draw left border
        for (var y = 0; y < CANVAS_HEIGHT; y += TILE_HEIGHT) {
          ctx.drawImage(background, 0, 0, TILE_WIDTH, TILE_HEIGHT, 0, y, TILE_WIDTH, TILE_HEIGHT);
        }

        // Draw right border
        var x = CANVAS_WIDTH - TILE_WIDTH;
        for (var y = 0; y < CANVAS_HEIGHT; y += TILE_HEIGHT) {
          ctx.drawImage(background, 0, 0, TILE_WIDTH, TILE_HEIGHT, x, y, TILE_WIDTH, TILE_HEIGHT);
        }

        // Draw grass
        for (var y = TILE_HEIGHT; y < CANVAS_HEIGHT - TILE_HEIGHT; y += TILE_HEIGHT) {
          for (var x = TILE_WIDTH; x < CANVAS_WIDTH - TILE_WIDTH; x += TILE_WIDTH) {
            ctx.drawImage(background, TILE_WIDTH, TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT, x, y, TILE_WIDTH, TILE_HEIGHT);
          }
        }

        // Draw inside indestructible blocks
        for (var y = TILE_HEIGHT * 2; y < CANVAS_HEIGHT - TILE_HEIGHT * 2; y += TILE_HEIGHT * 2) {
          for (var x = TILE_WIDTH * 2; x < CANVAS_WIDTH - TILE_WIDTH * 2; x += TILE_WIDTH * 2) {
            ctx.drawImage(background, 0, 0, TILE_WIDTH, TILE_HEIGHT, x, y, TILE_WIDTH, TILE_HEIGHT);
          }
        }
      }

      window.createBomb = function(x, y) {
        new Bomb();
      }

      function update() {
        for (var i = 0; i < bombs.length; i++) {
          bombs[i].update();
        }
      }

      function draw() {
        drawBackground();
        for (var i = 0; i < bombs.length; i++) {
          bombs[i].draw();
        }
      }

      function start() {
        // This is where the magic begins, my friends
        var run = (function() {
          var loops = 0, skipTicks = 1000 / 30,
              maxFrameSkip = 10,
              nextGameTick = (new Date).getTime();
          
          return function() {
            loops = 0;
            
            while ((new Date).getTime() > nextGameTick && loops < maxFrameSkip) {
              update();
              nextGameTick += skipTicks;
              loops++;
            }
            
            draw();
          };
        })();

        interval = setInterval(run, 0);
      }

      function init() {
        // Prepare canvas
        $('canvas').attr('width', CANVAS_WIDTH).attr('height', CANVAS_HEIGHT);
        ctx = $('canvas').get(0).getContext('2d');
        // Retro-ified
        ctx.imageSmoothingEnabled = false;
        ctx.mozImageSmoothingEnabled = false;
        ctx.webkitImageSmoothingEnabled = false;

        // Load background
        background = new Image();
        background.src = "images/background.png";
        background.onload = function() {
          start();
        };
      }

      init();
    });
  </script>
</head>
<body>
  <canvas></canvas>
</body>
</html>
