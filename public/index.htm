<!DOCTYPE html>
<html>
<head>
  <script src="http://davidbau.com/encode/seedrandom-min.js"></script>
  <script src="/socket.io/socket.io.js"></script>

  <style type="text/css">
    body {
      background-color: #EEE;
    }

    canvas {
      position: absolute;
      width: 720px;
      height: 624px;
      left: 50%;
      top: 50%;
      margin-left: -360px;
      margin-top: -312px;
      background-color: #666;

      /* Retro-ified */
      image-rendering: optimizeSpeed;
      image-rendering:-o-crisp-edges;
      image-rendering:-webkit-optimize-contrast;
      -ms-interpolation-mode: nearest-neighbor;
    }
  </style>

  <script src="http://code.jquery.com/jquery-1.9.1.min.js" type="text/javascript"></script>
  <script type="text/javascript">

      
    $(function() {
      var interval = false;
      var FPS = 30;
      var TILE_WIDTH = 16;
      var TILE_HEIGHT = 16;
      var CANVAS_WIDTH = 240;
      var CANVAS_HEIGHT = 208;
      var MAP_WIDTH = CANVAS_WIDTH / TILE_WIDTH;
      var MAP_HEIGHT = CANVAS_HEIGHT / TILE_HEIGHT;
      var BOMBERMAN_HEIGHT = 25;
      var BOMBERMAN_WIDTH = 18;
      var BOMBERMAN_POS_X = 0;
      var BOMBERMAN_POS_Y = 35;
      var START_X = TILE_WIDTH;
      var START_Y = TILE_HEIGHT;
      var TICKS_PER_FRAME = 15;
      var BOMB_FRAMES = 2;
      var BOMBERMAN_FRAMES = 5;
      var Y_COORDS_BOMBERMAN = [0, 75, 110, 35]; // Left, Right, Top, Bottom
      var X_COORDS_BOMBERMAN = [
        [150, 128, 106, 84, 64, 40, 22, 2],
        [2, 22, 46, 70, 92, 110, 130, 150],
        [2, 22, 46, 70, 90, 110, 130, 150],
        [2, 22, 46, 70, 92, 110, 130, 150]
      ]
      var startPositions = [{x:(1+.5)*16,y:(1+.5)*16},{x:(13+0.5)*16,y:(1+0.5)*16},{x:(1+0.5)*16,y:(11+0.5)*16},{x:(13+.5)*16,y:(11+0.5)*16}];
      window.myId = null;

/* ==== Socket Stuff ==== */
      window.socket = io.connect();
      socket.on('id assignment', function (data) {
        console.log("connected, my id is ",data.id);
        myId = data.id;
        for(var i=0; i<=data.id;i++){
            player.construct(i);
        }
        generateMap();
        start();
      }).on('reset', function(data){
        console.log("reset, players:",data.id);
        players = [];
        for(var i=0;i<=data.id; i++){
            player.construct(i);
        }
        generateMap();
        start();
      }).on('player move',function(data){
        players[data.id].serverMove(data);
      }).on('player stop',function(data){
        players[data.id].serverStop(data);
      }).on('player bomb',function(data){
        players[data.id].serverBomb(data);
      }).on('disconnect',function(data){
        socket.disconnect();
            $("#body").html("Server restarted, <a onclick='location.reload();'>Refresh!</a>");
      }).on('player die',function(data){
        players[data.id].serverDie();
      });

      var TILES = {
        0: {x: TILE_WIDTH, y: TILE_HEIGHT},
        1: {x: 0, y: 0},
        2: {x: 48, y: 48}
      };

      window.players = [];

      var ctx = null,
          map = null,
          background = null,
          bomberman = null,
          interval = null,
          bombs = [];

      // From: http://www.htmlgoodies.com/html5/tutorials/create-an-object-oriented-javascript-class-constructor.html#fbid=EYauP6cfQH6
      var Class = function(methods) {   
        var klass = function() {    
          this.initialize.apply(this, arguments);          
        };  

        for (var property in methods) { 
          klass.prototype[property] = methods[property];
        }
              
        if (!klass.prototype.initialize) klass.prototype.initialize = function(){};      

        return klass;    
      }

// from http://wiki.processing.org/w/Rect-Rect_intersection
      function rect_collision(a,b) 
      {
        x_1 = a[0];
        y_1 = a[1];
        width_1 = a[2];
        height_1 = a[3];
        x_2 = b[0];
        y_2 = b[1];
        width_2 = b[2];
        height_2 = b[3];

        return !(x_1 > x_2+width_2 || x_1+width_1 < x_2 || y_1 > y_2+height_2 || y_1+height_1 < y_2);
      }

      window.player = {
        id: 0,
        x: 24,
        y: 24,
        direction: 0,
        bombs: [],
        maxBombs: 20,
        directions: { left: 0, right: 1, up: 2, down: 3},
        moving: false,
        collision: { x: -7, y: -7, w: 15, h: 15},
        graphics: {x:-8,y:-16,w:16,h:24},
        movement : [{x: -100, y:0},{x: 100,y:0},{x:0,y:-100},{x:0,y:100}],

        construct: function(id){
          players[id] = $.extend(true,{},player);
          players[id].id = id;
          players[id].x = startPositions[id].x;
          players[id].y = startPositions[id].y;
          players[id].alive = true;
        },
        
        pos: {x: BOMBERMAN_POS_X, y: BOMBERMAN_POS_Y},
        currentFrame: 0,

        getRect: function(){
            return [this.x+this.collision.x,this.y+this.collision.y,this.collision.w,this.collision.h];
        },

        draw: function(){
            for(var i=0;i < this.bombs.length;i++){
                this.bombs[i].draw();
            }

            if(this.alive) ctx.drawImage(bomberman, this.pos.x , this.pos.y, BOMBERMAN_WIDTH, BOMBERMAN_HEIGHT, this.x+this.graphics.x, this.y+this.graphics.y, BOMBERMAN_WIDTH, BOMBERMAN_HEIGHT);

        },

        bindToKeyboard: function(){
            var p=this; //scope into the jquery callbacks
            $(document).keydown(function(e){
                switch(e.keyCode){
                    case 37: 
                        p.move(player.directions.left);
                        break;
                    case 39: 
                        p.move(player.directions.right);
                        break;
                    case 38:
                        p.move(player.directions.up);
                        break;
                    case 40:
                        p.move(player.directions.down);
                        break;
                    case 32:
                        p.bomb();
                        break;
                }
            });
            $(document).keyup(function(e){
                switch(e.keyCode){
                    case 37: 
                        p.stop(player.directions.left);
                        break;
                    case 39: 
                        p.stop(player.directions.right);
                        break;
                    case 38:
                        p.stop(player.directions.up);
                        break;
                    case 40:
                        p.stop(player.directions.down);
                        break;
                }
            });
        },
        die: function(){
            this.alive=false;
            console.log('I am dead');
            socket.emit('player die',{'id':this.id});
        },
        serverDie: function(){
            this.alive=false;
        },
        move: function(direction){
            if(this.moving==false || this.direction!=direction){
                socket.emit('player move',{'x':this.x,'y':this.y,'direction':direction,'id':this.id});
            }
            this.moving=true;
            this.direction=direction;

        },
        serverMove: function(data){
            this.x=data.x;
            this.y=data.y;
            this.direction = data.direction;
            this.moving=true;
        },
        stop: function(direction){
            if(this.moving==true && this.direction==direction){
                socket.emit('player stop',{'x':this.x,'y':this.y,'direction':direction,'id':this.id});
            }
            if(direction==this.direction){
                this.moving=false;
                this.currentFrame = 0;
            }
        },
        serverStop: function(data){
            this.x=data.x;
            this.y=data.y;
            this.direction = data.direction;
            this.moving=false;
        },
        update: function(timestep){
            for(var i=0;i < this.bombs.length;i++){
                this.bombs[i].update();
            }

            if(this.moving){
                var newX = this.x + this.movement[this.direction].x * timestep;
                var newY = this.y + this.movement[this.direction].y * timestep;
                this.pos.y = Y_COORDS_BOMBERMAN[this.direction];
            
                this.currentFrame += 1;
                this.currentFrame = this.currentFrame % BOMBERMAN_FRAMES;
                this.pos.x = X_COORDS_BOMBERMAN[this.direction][this.currentFrame];

              // Collision detection follows, I can't believe this even works

              var collisionBounds = {
                top: newY + this.collision.y,
                right: newX + this.collision.x + this.collision.w,
                bottom: newY + this.collision.y + this.collision.h,
                left: newX + this.collision.x
              };

              if (this.direction == this.directions.up) {
                var tileY = Math.floor(collisionBounds.top / TILE_HEIGHT);
                var topCenterTile = map[tileY][Math.floor(newX / TILE_WIDTH)];
                var topLeftTile = map[tileY][Math.floor(collisionBounds.left / TILE_WIDTH)];
                var topRightTile = map[tileY][Math.floor(collisionBounds.right / TILE_WIDTH)];

                if ((topLeftTile != 0 && topRightTile != 0) || topCenterTile != 0) {
                  newY = tileY * TILE_HEIGHT + TILE_HEIGHT + this.collision.y + this.collision.h;
                }
                else if (topLeftTile != 0 && topRightTile == 0 && topCenterTile == 0) {
                  newX = Math.floor(collisionBounds.left / TILE_WIDTH) * TILE_WIDTH + TILE_WIDTH + this.collision.x + this.collision.w;
                }
                else if (topLeftTile == 0 && topRightTile != 0 && topCenterTile == 0) {
                  newX = Math.floor(collisionBounds.right / TILE_WIDTH) * TILE_WIDTH + this.collision.x;
                }
              }
              else if (this.direction == this.directions.right) {
                var tileX = Math.floor(collisionBounds.right / TILE_WIDTH);
                var rightCenterTile = map[Math.floor(newY / TILE_HEIGHT)][tileX];
                var rightTopTile = map[Math.floor(collisionBounds.top / TILE_HEIGHT)][tileX];
                var rightBottomTile = map[Math.floor(collisionBounds.bottom / TILE_HEIGHT)][tileX];

                if ((rightTopTile != 0 && rightBottomTile != 0) || rightCenterTile != 0) {
                  newX = tileX * TILE_WIDTH + this.collision.x;
                }
                else if (rightTopTile != 0 && rightBottomTile == 0 && rightCenterTile == 0) {
                  newY = Math.floor(collisionBounds.top / TILE_HEIGHT) * TILE_HEIGHT + TILE_HEIGHT + this.collision.y + this.collision.h;
                }
                else if (rightTopTile == 0 && rightBottomTile != 0 && rightCenterTile == 0) {
                  newY = Math.floor(collisionBounds.bottom / TILE_HEIGHT) * TILE_HEIGHT + this.collision.y;
                }
              }
              else if (this.direction == this.directions.down) {
                var tileY = Math.floor(collisionBounds.bottom / TILE_HEIGHT);
                var bottomCenterTile = map[tileY][Math.floor(newX / TILE_HEIGHT)];
                var bottomLeftTile = map[tileY][Math.floor(collisionBounds.left / TILE_HEIGHT)];
                var bottomRightTile = map[tileY][Math.floor(collisionBounds.right / TILE_HEIGHT)];

                if ((bottomLeftTile != 0 && bottomRightTile != 0) || bottomCenterTile != 0) {
                  newY = tileY * TILE_HEIGHT + this.collision.y;
                }
                else if (bottomLeftTile != 0 && bottomRightTile == 0 && bottomCenterTile == 0) {
                  newX = Math.floor(collisionBounds.left / TILE_WIDTH) * TILE_WIDTH + TILE_WIDTH + this.collision.x + this.collision.w;
                }
                else if (bottomLeftTile == 0 && bottomRightTile != 0 && bottomCenterTile == 0) {
                  newX = Math.floor(collisionBounds.right / TILE_WIDTH) * TILE_WIDTH + this.collision.x;
                }
              }
              else if (this.direction == this.directions.left) {
                var tileX = Math.floor(collisionBounds.left / TILE_WIDTH);
                var leftCenterTile = map[Math.floor(newY / TILE_HEIGHT)][tileX];
                var leftTopTile = map[Math.floor(collisionBounds.top / TILE_HEIGHT)][tileX];
                var leftBottomTile = map[Math.floor(collisionBounds.bottom / TILE_HEIGHT)][tileX];

                if ((leftTopTile != 0 && leftBottomTile != 0) || leftCenterTile != 0) {
                  newX = tileX * TILE_WIDTH + TILE_WIDTH + this.collision.x + this.collision.w;
                }
                else if (leftTopTile != 0 && leftBottomTile == 0 && leftCenterTile == 0) {
                  newY = Math.floor(collisionBounds.top / TILE_HEIGHT) * TILE_HEIGHT + TILE_HEIGHT + this.collision.y + this.collision.h;
                }
                else if (leftTopTile == 0 && leftBottomTile != 0 & leftCenterTile == 0) {
                  newY = Math.floor(collisionBounds.bottom / TILE_HEIGHT) * TILE_HEIGHT + this.collision.y;
                }
              }

              this.x = newX;
              this.y = newY;
            }
        },
        bomb: function(){
            if(this.bombs.length>=this.maxBombs) return;
            new Bomb(this);
            socket.emit('player bomb',{'x':this.x,'y':this.y,'id':this.id});
        },
        serverBomb: function(data){
            this.x=data.x;
            this.y=data.y;
            new Bomb(this);
        }
      }

      var Bomb = Class({
        TIME_TILL_EXPLODE: 4,
        TIME_TILL_DESTROY: 4.5,
        tileX: 0,
        tileY: 0,
        width: 16,
        height: 19,
        pos_x: 0,
        pos_y: 0,
        curTicks: 0,
        isExploded: false,
        owner: null,
        bomb_img: null,
        splosion_img: null,
        splosion: { size: {x: 17, y:21}, middle: {x:362, y:29} },
        splosionData: [],

        initialize: function(owner) {
          this.tileX = Math.floor(owner.x / TILE_WIDTH);
          this.tileY = Math.floor(owner.y / TILE_HEIGHT);
          this.bomb_img = new Image();
          this.bomb_img.src = "images/bomb.png";
          this.splosion_img = new Image;
          this.splosion_img.src = "images/splosion.png";
          this.owner = owner;
          this.owner.bombs.push(this);
        },

        update: function() {
          this.curTicks++;
          if (this.isExploded ==false && this.curTicks == this.TIME_TILL_EXPLODE * FPS) {
            this.isExploded = true;
            //check if it killed our player
            if(players[myId].alive==true){
                var explosionTiles = [];
                this.splosionData = [this.tileX-1,null,this.tileX+1,null,this.tileY-1,null, this.tileY,null];
                for(var x= this.tileX; x>= this.tileX -2; x--){
                    if (map[this.tileY][x] != 0){
                            if(map[this.tileY][x] > 1){
                                map[this.tileY][x]=0;
                                this.splosionData[1] = x;
                            }
                            break;
                    }
                    this.splosionData[1] = x;
                    if(rect_collision(players[myId].getRect(),[x*16+2,this.tileY*16+2,12,12])) players[myId].die();
                }
                for (var x = this.tileX + 1; x <= this.tileX + 2; x++) {
                    if (map[this.tileY][x] != 0){
                        if(map[this.tileY][x]>1){
                             map[this.tileY][x] = 0;
                            this.splosionData[3] = x;
                        }
                        break;
                    }
                    this.splosionData[3] = x;
                    if(rect_collision(players[myId].getRect(),[x*16+2,this.tileY*16+2,12,12])) players[myId].die();
                }
                for (var y = this.tileY - 1; y >= this.tileY - 2; y--) {
                    if (map[y][this.tileX] != 0){
                        if(map[y][this.tileX]>1){
                            map[y][this.tileX] = 0;
                            this.splosionData[5] = y;
                        }
                        break;
                    }
                    this.splosionData[5] = y;
                    if(rect_collision(players[myId].getRect(),[this.tileY*16+2,y*16+2,12,12])) players[myId].die();
                }
                    
                for (var y = this.tileY; y <= this.tileY + 2; y++) {
                    if (map[y][this.tileX] != 0){
                        if(map[y][this.tileX]>1){
                            map[y][this.tileX] = 0;
                            this.splosionData[7] = y;
                        }
                        break;
                    }
                    this.splosionData[7] = y;
                    if(rect_collision(players[myId].getRect(),[this.tileY*16-4,y*16-4,12,12])) players[myId].die();
                }
            }

          }
          else if (this.curTicks == this.TIME_TILL_DESTROY * FPS) {
            var idx = this.owner.bombs.indexOf(this);
            this.owner.bombs.splice(idx, 1);
          }
        },

        draw: function() {
          if (!this.isExploded) {
            this.pos_x = this.width*(Math.round((this.curTicks / TICKS_PER_FRAME) % BOMB_FRAMES));
            ctx.drawImage(this.bomb_img, this.pos_x, this.pos_y, this.width, this.height, this.tileX * TILE_WIDTH, this.tileY * TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT);
          }
          else {
            // Left flame
            for (var x = this.splosionData[0]; x >= this.splosionData[1]; x--) {
              if (map[this.tileY][x] != 0)
                break;
              ctx.drawImage(
                this.splosion_img, 
                this.splosion.middle.x - (this.splosion.size.x * (this.tileX - x)),
                this.splosion.middle.y,
                this.splosion.size.x,
                this.splosion.size.y,
                x*TILE_WIDTH,
                this.tileY*TILE_HEIGHT,
                TILE_WIDTH, TILE_HEIGHT
                )
            }

            // Right flame
            for (var x = this.splosionData[2]; x <= this.splosionData[3]; x++) {
              if (map[this.tileY][x] != 0)
                break;
              ctx.drawImage(
                this.splosion_img, 
                this.splosion.middle.x + (this.splosion.size.x * (x - this.tileX)),
                this.splosion.middle.y,
                this.splosion.size.x,
                this.splosion.size.y,
                x*TILE_WIDTH,
                this.tileY*TILE_HEIGHT,
                TILE_WIDTH, TILE_HEIGHT
              )            
            }
            // Top flame
            for (var y = this.splosionData[4]; y >= this.splosionData[5]; y--) {
              if (map[y][this.tileX] != 0)
                break;
              ctx.drawImage(
                this.splosion_img, 
                this.splosion.middle.x,
                this.splosion.middle.y - (this.splosion.size.x * (this.tileY - y)),
                this.splosion.size.y,
                this.splosion.size.x,
                this.tileX*TILE_WIDTH,
                y*TILE_HEIGHT,
                TILE_WIDTH, TILE_HEIGHT
              )   
            }

            // Bottom flame
            for (var y = this.splosionData[6]; y <= this.splosionData[7]; y++) {
              if (map[y][this.tileX] != 0)
                break;
              ctx.drawImage(
                this.splosion_img, 
                this.splosion.middle.x,
                this.splosion.middle.y + (this.splosion.size.x * (y - this.tileY)),
                this.splosion.size.y,
                this.splosion.size.x,
                this.tileX*TILE_WIDTH,
                y*TILE_HEIGHT,
                TILE_WIDTH, TILE_HEIGHT
              )   
            }
          }
        }
      });

      function generateMap(seed) {
        map = [];
        for (var i = 0; i < MAP_HEIGHT; i++) {
          map[i] = [];
        }

        // Grass
        for (var y = 0; y < MAP_HEIGHT; y++) {
          for (var x = 0; x < MAP_WIDTH; x++) {
            map[y][x] = 0;
          }
        }

        Math.seedrandom(1337);

        // Destructible blocks
        for (var y = 0; y < MAP_HEIGHT; y++) {
          for (var x = 0; x < MAP_WIDTH; x++) {
            if (Math.random() >= 0.2) {
              map[y][x] = 2;
            }
          }
        }

        // Ensure starting positions are grass
        map[1][1] = 0;
        map[1][2] = 0;
        map[2][1] = 0;
        
        map[1][MAP_WIDTH - 2] = 0;
        map[1][MAP_WIDTH - 3] = 0;
        map[2][MAP_WIDTH - 2] = 0;

        map[MAP_HEIGHT - 2][1] = 0;
        map[MAP_HEIGHT - 2][2] = 0;
        map[MAP_HEIGHT - 3][1] = 0;

        map[MAP_HEIGHT - 2][MAP_WIDTH - 2] = 0;
        map[MAP_HEIGHT - 2][MAP_WIDTH - 3] = 0;
        map[MAP_HEIGHT - 3][MAP_WIDTH - 2] = 0;

        // Top border
        for (var x = 0; x < MAP_WIDTH; x++) {
          map[0][x] = 1;
        }

        // Bottom border
        for (var x = 0; x < MAP_WIDTH; x++) {
          map[MAP_HEIGHT - 1][x] = 1;
        }

        // Left border
        for (var y = 0; y < MAP_HEIGHT; y++) {
          map[y][0] = 1;
        }

        // Right border
        for (var y = 0; y < MAP_HEIGHT; y++) {
          map[y][MAP_WIDTH - 1] = 1;
        }

        // Inside indestructible blocks
        for (var y = 2; y < MAP_HEIGHT - 2; y += 2) {
          for (var x = 2; x < MAP_WIDTH - 2; x += 2) {
            map[y][x] = 1;
          }
        }

        map[5][5] = 2;
      }

      function drawArea() {
        for (var y = 0; y < MAP_HEIGHT; y++) {
          for (var x = 0; x < MAP_WIDTH; x++) {
            var tileIdx = map[y][x];
            var tile = TILES[tileIdx];
            ctx.drawImage(background, tile.x, tile.y, TILE_WIDTH, TILE_HEIGHT, x * TILE_WIDTH, y * TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT);
          }
        }
      }

      
      window.createBomb = function(tileX, tileY) {
        new Bomb(tileX, tileY);
      }

      function update() {
        for(var i=0;i<players.length;i++){
            players[i].update(1.0/FPS);    
        }
      }

      function draw() {
        drawArea();
        for(var i=0;i<players.length;i++){
            players[i].draw();    
        }
      }

      function start() {
        clearInterval(interval);
        players[myId].bindToKeyboard();

        // This is where the magic begins, my friends
        var run = (function() {
          var loops = 0, skipTicks = 1000 / 30,
              maxFrameSkip = 10,
              nextGameTick = (new Date).getTime();
          
          return function() {
            loops = 0;
            
            //while ((new Date).getTime() > nextGameTick && loops < maxFrameSkip) {
              update();
            //  nextGameTick += skipTicks;
            //  loops++;
           // }
            
            //if(loops>0) 
            draw();
          };
        })();

        interval = setInterval(run, 1000/30);
      }

      function init() {
        // Prepare canvas
        $('canvas').attr('width', CANVAS_WIDTH).attr('height', CANVAS_HEIGHT);
        ctx = $('canvas').get(0).getContext('2d');
        // Retro-ified
        ctx.imageSmoothingEnabled = false;
        ctx.mozImageSmoothingEnabled = false;
        ctx.webkitImageSmoothingEnabled = false;

        // Load background
        background = new Image();
        background.src = "images/background.png";

        background.onload = function() {
          bomberman = new Image();
          bomberman.src = "images/bomberman.png";

          bomberman.onload = function(){
            
          };
        };
      }

      init();
    });

    function TextureManager(){

    }

  </script>
</head>
<body>
  <canvas></canvas>
</body>
</html>
